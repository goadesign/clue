// Code generated by goa v3.8.3, DO NOT EDIT.
//
// test HTTP client encoders and decoders
//
// Command:
// $ goa gen goa.design/clue/internal/testsvc/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	test "goa.design/clue/internal/testsvc/gen/test"
	goahttp "goa.design/goa/v3/http"
)

// BuildHTTPMethodRequest instantiates a HTTP request object with method and
// path set to call the "test" service "http_method" endpoint
func (c *Client) BuildHTTPMethodRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		i int
	)
	{
		p, ok := v.(*test.Fields)
		if !ok {
			return nil, goahttp.ErrInvalidType("test", "http_method", "*test.Fields", v)
		}
		if p.I != nil {
			i = *p.I
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: HTTPMethodTestPath(i)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("test", "http_method", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeHTTPMethodRequest returns an encoder for requests sent to the test
// http_method server.
func EncodeHTTPMethodRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*test.Fields)
		if !ok {
			return goahttp.ErrInvalidType("test", "http_method", "*test.Fields", v)
		}
		body := NewHTTPMethodRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("test", "http_method", err)
		}
		return nil
	}
}

// DecodeHTTPMethodResponse returns a decoder for responses returned by the
// test http_method endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeHTTPMethodResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body HTTPMethodResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("test", "http_method", err)
			}
			res := NewHTTPMethodFieldsOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("test", "http_method", resp.StatusCode, string(body))
		}
	}
}
