// Code generated by goa v3.20.0, DO NOT EDIT.
//
// test gRPC client encoders and decoders
//
// Command:
// $ goa gen goa.design/clue/internal/testsvc/design

package client

import (
	"context"

	testpb "goa.design/clue/internal/testsvc/gen/grpc/test/pb"
	test "goa.design/clue/internal/testsvc/gen/test"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGrpcMethodFunc builds the remote method to invoke for "test" service
// "grpc_method" endpoint.
func BuildGrpcMethodFunc(grpccli testpb.TestClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GrpcMethod(ctx, reqpb.(*testpb.GrpcMethodRequest), opts...)
		}
		return grpccli.GrpcMethod(ctx, &testpb.GrpcMethodRequest{}, opts...)
	}
}

// EncodeGrpcMethodRequest encodes requests sent to test grpc_method endpoint.
func EncodeGrpcMethodRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*test.Fields)
	if !ok {
		return nil, goagrpc.ErrInvalidType("test", "grpc_method", "*test.Fields", v)
	}
	return NewProtoGrpcMethodRequest(payload), nil
}

// DecodeGrpcMethodResponse decodes responses from the test grpc_method
// endpoint.
func DecodeGrpcMethodResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*testpb.GrpcMethodResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("test", "grpc_method", "*testpb.GrpcMethodResponse", v)
	}
	res := NewGrpcMethodResult(message)
	return res, nil
} // BuildGrpcStreamFunc builds the remote method to invoke for "test" service
// "grpc_stream" endpoint.
func BuildGrpcStreamFunc(grpccli testpb.TestClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GrpcStream(ctx, opts...)
		}
		return grpccli.GrpcStream(ctx, opts...)
	}
}

// DecodeGrpcStreamResponse decodes responses from the test grpc_stream
// endpoint.
func DecodeGrpcStreamResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	return &GrpcStreamClientStream{
		stream: v.(testpb.Test_GrpcStreamClient),
	}, nil
}
