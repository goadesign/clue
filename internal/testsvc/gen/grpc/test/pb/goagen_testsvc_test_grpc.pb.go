// Code generated with goa v3.20.0, DO NOT EDIT.
//
// test protocol buffer definition
//
// Command:
// $ goa gen goa.design/clue/internal/testsvc/design

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: goagen_testsvc_test.proto

package testpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Test_GrpcMethod_FullMethodName = "/test.Test/GrpcMethod"
	Test_GrpcStream_FullMethodName = "/test.Test/GrpcStream"
)

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service is the test service interface.
type TestClient interface {
	// GrpcMethod implements grpc_method.
	GrpcMethod(ctx context.Context, in *GrpcMethodRequest, opts ...grpc.CallOption) (*GrpcMethodResponse, error)
	// GrpcStream implements grpc_stream.
	GrpcStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GrpcStreamStreamingRequest, GrpcStreamResponse], error)
}

type testClient struct {
	cc grpc.ClientConnInterface
}

func NewTestClient(cc grpc.ClientConnInterface) TestClient {
	return &testClient{cc}
}

func (c *testClient) GrpcMethod(ctx context.Context, in *GrpcMethodRequest, opts ...grpc.CallOption) (*GrpcMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrpcMethodResponse)
	err := c.cc.Invoke(ctx, Test_GrpcMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) GrpcStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GrpcStreamStreamingRequest, GrpcStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[0], Test_GrpcStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GrpcStreamStreamingRequest, GrpcStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Test_GrpcStreamClient = grpc.BidiStreamingClient[GrpcStreamStreamingRequest, GrpcStreamResponse]

// TestServer is the server API for Test service.
// All implementations must embed UnimplementedTestServer
// for forward compatibility.
//
// Service is the test service interface.
type TestServer interface {
	// GrpcMethod implements grpc_method.
	GrpcMethod(context.Context, *GrpcMethodRequest) (*GrpcMethodResponse, error)
	// GrpcStream implements grpc_stream.
	GrpcStream(grpc.BidiStreamingServer[GrpcStreamStreamingRequest, GrpcStreamResponse]) error
	mustEmbedUnimplementedTestServer()
}

// UnimplementedTestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestServer struct{}

func (UnimplementedTestServer) GrpcMethod(context.Context, *GrpcMethodRequest) (*GrpcMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcMethod not implemented")
}
func (UnimplementedTestServer) GrpcStream(grpc.BidiStreamingServer[GrpcStreamStreamingRequest, GrpcStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GrpcStream not implemented")
}
func (UnimplementedTestServer) mustEmbedUnimplementedTestServer() {}
func (UnimplementedTestServer) testEmbeddedByValue()              {}

// UnsafeTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServer will
// result in compilation errors.
type UnsafeTestServer interface {
	mustEmbedUnimplementedTestServer()
}

func RegisterTestServer(s grpc.ServiceRegistrar, srv TestServer) {
	// If the following call pancis, it indicates UnimplementedTestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Test_ServiceDesc, srv)
}

func _Test_GrpcMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).GrpcMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Test_GrpcMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).GrpcMethod(ctx, req.(*GrpcMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_GrpcStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).GrpcStream(&grpc.GenericServerStream[GrpcStreamStreamingRequest, GrpcStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Test_GrpcStreamServer = grpc.BidiStreamingServer[GrpcStreamStreamingRequest, GrpcStreamResponse]

// Test_ServiceDesc is the grpc.ServiceDesc for Test service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Test_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GrpcMethod",
			Handler:    _Test_GrpcMethod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GrpcStream",
			Handler:       _Test_GrpcStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "goagen_testsvc_test.proto",
}
