// Code generated by Clue Mock Generator {{ .ToolVersion }}, DO NOT EDIT.
//
// Command:
// {{ .ToolCommandLine }}

package {{ .PkgName }}

import (
{{- range .StdImports }}
	{{ if .Alias }}{{ .Alias }} {{ end }}"{{ .PkgPath }}"
{{- end }}
{{ range .ExtImports }}
	{{ if .Alias }}{{ .Alias }} {{ end }}"{{ .PkgPath }}"
{{- end }}
{{ range .IntImports }}
	{{ if .Alias }}{{ .Alias }} {{ end }}"{{ .PkgPath }}"
{{- end }}
)

type (
{{- range $index, $interface := .Interfaces }}
{{- if ge $index 1 }}
{{ end }}
	{{ .Name }}{{ .TypeParameters }} struct {
		m *mock.Mock
		t *testing.T
	}
{{ range .Methods }}
	{{ printf "%v%v" .Func $interface.TypeParameters | printf $interface.MaxFuncLenFmt }} func({{ .Parameters }}){{ if .Results }} {{ .Results }}{{ end }}
{{- end }}
{{- end }}
)
{{ $import := .PkgImport -}}
{{- range $index, $interface := .Interfaces }}
{{- if ge $index 1 }}
{{ end }}
func {{ .Constructor }}{{ .TypeParameters }}(t *testing.T) *{{ .Name }}{{ .TypeParameterVars }} {
	var (
		{{ .Var | printf ($import.PkgName | .ConstructorFmt) }} = &{{ .Name }}{{ .TypeParameterVars }}{mock.New(), t}
		_ {{ $import.PkgName }}.{{ .Name }}{{ .TypeParameterVars }} = m
	)
	return {{ .Var }}
}
{{ range $index, $method := .Methods }}
{{- if ge $index 1 }}
{{ end }}
func ({{ $interface.Var }} *{{ $interface.Name }}{{ $interface.TypeParameterVars }}) {{ .Add }}(f {{ .Func }}{{ $interface.TypeParameterVars }}) {
	{{ $interface.Var }}.m.Add("{{ .Name }}", f)
}

func ({{ $interface.Var }} *{{ $interface.Name }}{{ $interface.TypeParameterVars }}) {{ .Set }}(f {{ .Func }}{{ $interface.TypeParameterVars }}) {
	{{ $interface.Var }}.m.Set("{{ .Name }}", f)
}

func ({{ .InterfaceVar }} *{{ $interface.Name }}{{ $interface.TypeParameterVars }}) {{ .Name }}({{ .Parameters }}){{ if .Results }} {{ .Results }}{{ end }} {
	if {{ .FuncVar }} := {{ .InterfaceVar }}.m.Next("{{ .Name }}"); {{ .FuncVar }} != nil {
		{{ if .Results }}return {{ end }}{{ .FuncVar }}.({{ .Func }}{{ $interface.TypeParameterVars }})({{ .ParameterVars }})
{{- if not .Results }}
		return
{{- end }}
	}
	{{ .InterfaceVar }}.t.Helper()
	{{ .InterfaceVar }}.t.Error("unexpected {{ .Name }} call")
{{- if .ZeroResults }}
	return {{ .ZeroResults }}
{{- end }}
}
{{- end }}

func ({{ $interface.Var }} *{{ $interface.Name }}{{ $interface.TypeParameterVars }}) HasMore() bool {
	return {{ $interface.Var }}.m.HasMore()
}
{{- end }}
