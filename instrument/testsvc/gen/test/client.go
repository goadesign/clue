// Code generated by goa v3.5.3, DO NOT EDIT.
//
// test client
//
// Command:
// $ goa gen github.com/crossnokaye/micro/instrument/testsvc/design

package test

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "test" service client.
type Client struct {
	HTTPMethodEndpoint    goa.Endpoint
	GrpcMethodEndpoint    goa.Endpoint
	GrpcStreamingEndpoint goa.Endpoint
}

// NewClient initializes a "test" service client given the endpoints.
func NewClient(hTTPMethod, grpcMethod, grpcStreaming goa.Endpoint) *Client {
	return &Client{
		HTTPMethodEndpoint:    hTTPMethod,
		GrpcMethodEndpoint:    grpcMethod,
		GrpcStreamingEndpoint: grpcStreaming,
	}
}

// HTTPMethod calls the "http_method" endpoint of the "test" service.
func (c *Client) HTTPMethod(ctx context.Context, p *Fields) (res *Fields, err error) {
	var ires interface{}
	ires, err = c.HTTPMethodEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Fields), nil
}

// GrpcMethod calls the "grpc_method" endpoint of the "test" service.
func (c *Client) GrpcMethod(ctx context.Context, p *Fields) (res *Fields, err error) {
	var ires interface{}
	ires, err = c.GrpcMethodEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Fields), nil
}

// GrpcStreaming calls the "grpc_streaming" endpoint of the "test" service.
func (c *Client) GrpcStreaming(ctx context.Context) (res GrpcStreamingClientStream, err error) {
	var ires interface{}
	ires, err = c.GrpcStreamingEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(GrpcStreamingClientStream), nil
}
