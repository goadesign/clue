// Code generated by Clue Mock Generator v0.18.2, DO NOT EDIT.
//
// Command:
// $ cmg gen goa.design/clue/example/weather/services/locator/clients/ipapi

package mockipapi

import (
	"context"
	"net/http"
	"testing"

	"goa.design/clue/mock"

	"goa.design/clue/example/weather/services/locator/clients/ipapi"
)

type (
	Client struct {
		m *mock.Mock
		t *testing.T
	}

	ClientGetLocationFunc func(ctx context.Context, ip string) (*ipapi.WorldLocation, error)
	ClientNameFunc        func() string
	ClientPingFunc        func(ctx context.Context) error

	Doer struct {
		m *mock.Mock
		t *testing.T
	}

	DoerDoFunc func(req *http.Request) (*http.Response, error)
)

func NewClient(t *testing.T) *Client {
	var (
		m              = &Client{mock.New(), t}
		_ ipapi.Client = m
	)
	return m
}

func (m *Client) AddGetLocation(f ClientGetLocationFunc) {
	m.m.Add("GetLocation", f)
}

func (m *Client) SetGetLocation(f ClientGetLocationFunc) {
	m.m.Set("GetLocation", f)
}

func (m *Client) GetLocation(ctx context.Context, ip string) (*ipapi.WorldLocation, error) {
	if f := m.m.Next("GetLocation"); f != nil {
		return f.(ClientGetLocationFunc)(ctx, ip)
	}
	m.t.Helper()
	m.t.Error("unexpected GetLocation call")
	return nil, nil
}

func (m *Client) AddName(f ClientNameFunc) {
	m.m.Add("Name", f)
}

func (m *Client) SetName(f ClientNameFunc) {
	m.m.Set("Name", f)
}

func (m *Client) Name() string {
	if f := m.m.Next("Name"); f != nil {
		return f.(ClientNameFunc)()
	}
	m.t.Helper()
	m.t.Error("unexpected Name call")
	return ""
}

func (m *Client) AddPing(f ClientPingFunc) {
	m.m.Add("Ping", f)
}

func (m *Client) SetPing(f ClientPingFunc) {
	m.m.Set("Ping", f)
}

func (m *Client) Ping(ctx context.Context) error {
	if f := m.m.Next("Ping"); f != nil {
		return f.(ClientPingFunc)(ctx)
	}
	m.t.Helper()
	m.t.Error("unexpected Ping call")
	return nil
}

func (m *Client) HasMore() bool {
	return m.m.HasMore()
}

func NewDoer(t *testing.T) *Doer {
	var (
		m            = &Doer{mock.New(), t}
		_ ipapi.Doer = m
	)
	return m
}

func (m *Doer) AddDo(f DoerDoFunc) {
	m.m.Add("Do", f)
}

func (m *Doer) SetDo(f DoerDoFunc) {
	m.m.Set("Do", f)
}

func (m *Doer) Do(req *http.Request) (*http.Response, error) {
	if f := m.m.Next("Do"); f != nil {
		return f.(DoerDoFunc)(req)
	}
	m.t.Helper()
	m.t.Error("unexpected Do call")
	return nil, nil
}

func (m *Doer) HasMore() bool {
	return m.m.HasMore()
}
