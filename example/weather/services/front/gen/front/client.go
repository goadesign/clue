// Code generated by goa v3.14.0, DO NOT EDIT.
//
// front client
//
// Command:
// $ goa gen goa.design/clue/example/weather/services/front/design -o
// services/front

package front

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "front" service client.
type Client struct {
	ForecastEndpoint  goa.Endpoint
	TestAllEndpoint   goa.Endpoint
	TestSmokeEndpoint goa.Endpoint
}

// NewClient initializes a "front" service client given the endpoints.
func NewClient(forecast, testAll, testSmoke goa.Endpoint) *Client {
	return &Client{
		ForecastEndpoint:  forecast,
		TestAllEndpoint:   testAll,
		TestSmokeEndpoint: testSmoke,
	}
}

// Forecast calls the "forecast" endpoint of the "front" service.
// Forecast may return the following errors:
//   - "not_usa" (type *goa.ServiceError): IP address is not in the US
//   - error: internal error
func (c *Client) Forecast(ctx context.Context, p string) (res *Forecast2, err error) {
	var ires any
	ires, err = c.ForecastEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Forecast2), nil
}

// TestAll calls the "test_all" endpoint of the "front" service.
func (c *Client) TestAll(ctx context.Context, p *TestAllPayload) (res *TestResults, err error) {
	var ires any
	ires, err = c.TestAllEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*TestResults), nil
}

// TestSmoke calls the "test_smoke" endpoint of the "front" service.
func (c *Client) TestSmoke(ctx context.Context) (res *TestResults, err error) {
	var ires any
	ires, err = c.TestSmokeEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*TestResults), nil
}
