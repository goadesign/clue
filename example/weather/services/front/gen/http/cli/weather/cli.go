// Code generated by goa v3.10.2, DO NOT EDIT.
//
// Weather HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/clue/example/weather/services/front/design -o
// services/front

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	frontc "goa.design/clue/example/weather/services/front/gen/http/front/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `front forecast
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` front forecast --p "225.242.127.107"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		frontFlags = flag.NewFlagSet("front", flag.ContinueOnError)

		frontForecastFlags = flag.NewFlagSet("forecast", flag.ExitOnError)
		frontForecastPFlag = frontForecastFlags.String("p", "REQUIRED", "string is the payload type of the front service forecast method.")
	)
	frontFlags.Usage = frontUsage
	frontForecastFlags.Usage = frontForecastUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "front":
			svcf = frontFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "front":
			switch epn {
			case "forecast":
				epf = frontForecastFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "front":
			c := frontc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "forecast":
				endpoint = c.Forecast()
				data = *frontForecastPFlag
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// frontUsage displays the usage of the front command and its subcommands.
func frontUsage() {
	fmt.Fprintf(os.Stderr, `Public HTTP frontend
Usage:
    %[1]s [globalflags] front COMMAND [flags]

COMMAND:
    forecast: Retrieve weather forecast for given IP

Additional help:
    %[1]s front COMMAND --help
`, os.Args[0])
}
func frontForecastUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front forecast -p STRING

Retrieve weather forecast for given IP
    -p STRING: string is the payload type of the front service forecast method.

Example:
    %[1]s front forecast --p "225.242.127.107"
`, os.Args[0])
}
