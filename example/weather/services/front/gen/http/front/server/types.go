// Code generated by goa v3.14.0, DO NOT EDIT.
//
// front HTTP server types
//
// Command:
// $ goa gen goa.design/clue/example/weather/services/front/design -o
// services/front

package server

import (
	front "goa.design/clue/example/weather/services/front/gen/front"
	goa "goa.design/goa/v3/pkg"
)

// TestAllRequestBody is the type of the "front" service "test_all" endpoint
// HTTP request body.
type TestAllRequestBody struct {
	// Tests to run
	Include []string `form:"include,omitempty" json:"include,omitempty" xml:"include,omitempty"`
	// Tests to exclude
	Exclude []string `form:"exclude,omitempty" json:"exclude,omitempty" xml:"exclude,omitempty"`
}

// ForecastResponseBody is the type of the "front" service "forecast" endpoint
// HTTP response body.
type ForecastResponseBody struct {
	// Forecast location
	Location *LocationResponseBody `form:"location" json:"location" xml:"location"`
	// Weather forecast periods
	Periods []*PeriodResponseBody `form:"periods" json:"periods" xml:"periods"`
}

// TestAllResponseBody is the type of the "front" service "test_all" endpoint
// HTTP response body.
type TestAllResponseBody struct {
	// Test collections
	Collections []*TestCollectionResponseBody `form:"collections" json:"collections" xml:"collections"`
	// Duration of the tests in ms
	Duration int64 `form:"duration" json:"duration" xml:"duration"`
	// Number of tests that passed
	PassCount int `form:"pass_count" json:"pass_count" xml:"pass_count"`
	// Number of tests that failed
	FailCount int `form:"fail_count" json:"fail_count" xml:"fail_count"`
}

// TestSmokeResponseBody is the type of the "front" service "test_smoke"
// endpoint HTTP response body.
type TestSmokeResponseBody struct {
	// Test collections
	Collections []*TestCollectionResponseBody `form:"collections" json:"collections" xml:"collections"`
	// Duration of the tests in ms
	Duration int64 `form:"duration" json:"duration" xml:"duration"`
	// Number of tests that passed
	PassCount int `form:"pass_count" json:"pass_count" xml:"pass_count"`
	// Number of tests that failed
	FailCount int `form:"fail_count" json:"fail_count" xml:"fail_count"`
}

// ForecastNotUsaResponseBody is the type of the "front" service "forecast"
// endpoint HTTP response body for the "not_usa" error.
type ForecastNotUsaResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LocationResponseBody is used to define fields on response body types.
type LocationResponseBody struct {
	// Latitude
	Lat float64 `form:"lat" json:"lat" xml:"lat"`
	// Longitude
	Long float64 `form:"long" json:"long" xml:"long"`
	// City
	City string `form:"city" json:"city" xml:"city"`
	// State
	State string `form:"state" json:"state" xml:"state"`
}

// PeriodResponseBody is used to define fields on response body types.
type PeriodResponseBody struct {
	// Period name
	Name string `form:"name" json:"name" xml:"name"`
	// Start time
	StartTime string `form:"startTime" json:"startTime" xml:"startTime"`
	// End time
	EndTime string `form:"endTime" json:"endTime" xml:"endTime"`
	// Temperature
	Temperature int `form:"temperature" json:"temperature" xml:"temperature"`
	// Temperature unit
	TemperatureUnit string `form:"temperatureUnit" json:"temperatureUnit" xml:"temperatureUnit"`
	// Summary
	Summary string `form:"summary" json:"summary" xml:"summary"`
}

// TestCollectionResponseBody is used to define fields on response body types.
type TestCollectionResponseBody struct {
	// Name of the test collection
	Name string `form:"name" json:"name" xml:"name"`
	// Test results
	Results []*TestResultResponseBody `form:"results,omitempty" json:"results,omitempty" xml:"results,omitempty"`
	// Duration of the tests in ms
	Duration int64 `form:"duration" json:"duration" xml:"duration"`
	// Number of tests that passed
	PassCount int `form:"pass_count" json:"pass_count" xml:"pass_count"`
	// Number of tests that failed
	FailCount int `form:"fail_count" json:"fail_count" xml:"fail_count"`
}

// TestResultResponseBody is used to define fields on response body types.
type TestResultResponseBody struct {
	// Name of the test
	Name string `form:"name" json:"name" xml:"name"`
	// Status of the test
	Passed bool `form:"passed" json:"passed" xml:"passed"`
	// Error message if the test failed
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Duration of the test in ms
	Duration int64 `form:"duration" json:"duration" xml:"duration"`
}

// NewForecastResponseBody builds the HTTP response body from the result of the
// "forecast" endpoint of the "front" service.
func NewForecastResponseBody(res *front.Forecast2) *ForecastResponseBody {
	body := &ForecastResponseBody{}
	if res.Location != nil {
		body.Location = marshalFrontLocationToLocationResponseBody(res.Location)
	}
	if res.Periods != nil {
		body.Periods = make([]*PeriodResponseBody, len(res.Periods))
		for i, val := range res.Periods {
			body.Periods[i] = marshalFrontPeriodToPeriodResponseBody(val)
		}
	} else {
		body.Periods = []*PeriodResponseBody{}
	}
	return body
}

// NewTestAllResponseBody builds the HTTP response body from the result of the
// "test_all" endpoint of the "front" service.
func NewTestAllResponseBody(res *front.TestResults) *TestAllResponseBody {
	body := &TestAllResponseBody{
		Duration:  res.Duration,
		PassCount: res.PassCount,
		FailCount: res.FailCount,
	}
	if res.Collections != nil {
		body.Collections = make([]*TestCollectionResponseBody, len(res.Collections))
		for i, val := range res.Collections {
			body.Collections[i] = marshalFrontTestCollectionToTestCollectionResponseBody(val)
		}
	} else {
		body.Collections = []*TestCollectionResponseBody{}
	}
	return body
}

// NewTestSmokeResponseBody builds the HTTP response body from the result of
// the "test_smoke" endpoint of the "front" service.
func NewTestSmokeResponseBody(res *front.TestResults) *TestSmokeResponseBody {
	body := &TestSmokeResponseBody{
		Duration:  res.Duration,
		PassCount: res.PassCount,
		FailCount: res.FailCount,
	}
	if res.Collections != nil {
		body.Collections = make([]*TestCollectionResponseBody, len(res.Collections))
		for i, val := range res.Collections {
			body.Collections[i] = marshalFrontTestCollectionToTestCollectionResponseBody(val)
		}
	} else {
		body.Collections = []*TestCollectionResponseBody{}
	}
	return body
}

// NewForecastNotUsaResponseBody builds the HTTP response body from the result
// of the "forecast" endpoint of the "front" service.
func NewForecastNotUsaResponseBody(res *goa.ServiceError) *ForecastNotUsaResponseBody {
	body := &ForecastNotUsaResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewTestAllPayload builds a front service test_all endpoint payload.
func NewTestAllPayload(body *TestAllRequestBody) *front.TestAllPayload {
	v := &front.TestAllPayload{}
	if body.Include != nil {
		v.Include = make([]string, len(body.Include))
		for i, val := range body.Include {
			v.Include[i] = val
		}
	}
	if body.Exclude != nil {
		v.Exclude = make([]string, len(body.Exclude))
		for i, val := range body.Exclude {
			v.Exclude[i] = val
		}
	}

	return v
}
