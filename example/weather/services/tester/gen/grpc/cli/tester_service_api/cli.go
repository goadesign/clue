// Code generated by goa v3.14.0, DO NOT EDIT.
//
// Tester Service API gRPC client CLI support package
//
// Command:
// $ goa gen goa.design/clue/example/weather/services/tester/design -o
// services/tester

package cli

import (
	"flag"
	"fmt"
	"os"

	testerc "goa.design/clue/example/weather/services/tester/gen/grpc/tester/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `tester (test-all|test-smoke|test-forecaster|test-locator)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` tester test-all --message '{
      "Exclude": [
         "TestNameToExclude"
      ],
      "Include": [
         "TestNameToInclude"
      ]
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, any, error) {
	var (
		testerFlags = flag.NewFlagSet("tester", flag.ContinueOnError)

		testerTestAllFlags       = flag.NewFlagSet("test-all", flag.ExitOnError)
		testerTestAllMessageFlag = testerTestAllFlags.String("message", "", "")

		testerTestSmokeFlags = flag.NewFlagSet("test-smoke", flag.ExitOnError)

		testerTestForecasterFlags = flag.NewFlagSet("test-forecaster", flag.ExitOnError)

		testerTestLocatorFlags = flag.NewFlagSet("test-locator", flag.ExitOnError)
	)
	testerFlags.Usage = testerUsage
	testerTestAllFlags.Usage = testerTestAllUsage
	testerTestSmokeFlags.Usage = testerTestSmokeUsage
	testerTestForecasterFlags.Usage = testerTestForecasterUsage
	testerTestLocatorFlags.Usage = testerTestLocatorUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "tester":
			svcf = testerFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "tester":
			switch epn {
			case "test-all":
				epf = testerTestAllFlags

			case "test-smoke":
				epf = testerTestSmokeFlags

			case "test-forecaster":
				epf = testerTestForecasterFlags

			case "test-locator":
				epf = testerTestLocatorFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "tester":
			c := testerc.NewClient(cc, opts...)
			switch epn {
			case "test-all":
				endpoint = c.TestAll()
				data, err = testerc.BuildTestAllPayload(*testerTestAllMessageFlag)
			case "test-smoke":
				endpoint = c.TestSmoke()
				data = nil
			case "test-forecaster":
				endpoint = c.TestForecaster()
				data = nil
			case "test-locator":
				endpoint = c.TestLocator()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// testerUsage displays the usage of the tester command and its subcommands.
func testerUsage() {
	fmt.Fprintf(os.Stderr, `The Weather System Tester Service is used to manage the integration testing of the weater system
Usage:
    %[1]s [globalflags] tester COMMAND [flags]

COMMAND:
    test-all: Runs all tests in the iam system
    test-smoke: Runs smoke tests in the iam system
    test-forecaster: Runs tests for the forecaster service
    test-locator: Runs tests for the locator service

Additional help:
    %[1]s tester COMMAND --help
`, os.Args[0])
}
func testerTestAllUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tester test-all -message JSON

Runs all tests in the iam system
    -message JSON: 

Example:
    %[1]s tester test-all --message '{
      "Exclude": [
         "TestNameToExclude"
      ],
      "Include": [
         "TestNameToInclude"
      ]
   }'
`, os.Args[0])
}

func testerTestSmokeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tester test-smoke

Runs smoke tests in the iam system

Example:
    %[1]s tester test-smoke
`, os.Args[0])
}

func testerTestForecasterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tester test-forecaster

Runs tests for the forecaster service

Example:
    %[1]s tester test-forecaster
`, os.Args[0])
}

func testerTestLocatorUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tester test-locator

Runs tests for the locator service

Example:
    %[1]s tester test-locator
`, os.Args[0])
}
