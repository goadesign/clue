// Code generated by goa v3.14.2, DO NOT EDIT.
//
// tester gRPC client types
//
// Command:
// $ goa gen goa.design/clue/example/weather/services/tester/design -o
// services/tester

package client

import (
	testerpb "goa.design/clue/example/weather/services/tester/gen/grpc/tester/pb"
	tester "goa.design/clue/example/weather/services/tester/gen/tester"
	goa "goa.design/goa/v3/pkg"
)

// NewProtoTestAllRequest builds the gRPC request type from the payload of the
// "test_all" endpoint of the "tester" service.
func NewProtoTestAllRequest(payload *tester.TesterPayload) *testerpb.TestAllRequest {
	message := &testerpb.TestAllRequest{}
	if payload.Include != nil {
		message.Include = make([]string, len(payload.Include))
		for i, val := range payload.Include {
			message.Include[i] = val
		}
	}
	if payload.Exclude != nil {
		message.Exclude = make([]string, len(payload.Exclude))
		for i, val := range payload.Exclude {
			message.Exclude[i] = val
		}
	}
	return message
}

// NewTestAllResult builds the result type of the "test_all" endpoint of the
// "tester" service from the gRPC response type.
func NewTestAllResult(message *testerpb.TestAllResponse) *tester.TestResults {
	result := &tester.TestResults{
		Duration:  message.Duration,
		PassCount: int(message.PassCount),
		FailCount: int(message.FailCount),
	}
	if message.Collections != nil {
		result.Collections = make([]*tester.TestCollection, len(message.Collections))
		for i, val := range message.Collections {
			result.Collections[i] = &tester.TestCollection{
				Name:      val.Name,
				Duration:  val.Duration,
				PassCount: int(val.PassCount),
				FailCount: int(val.FailCount),
			}
			if val.Results != nil {
				result.Collections[i].Results = make([]*tester.TestResult, len(val.Results))
				for j, val := range val.Results {
					result.Collections[i].Results[j] = &tester.TestResult{
						Name:     val.Name,
						Passed:   val.Passed,
						Error:    val.Error,
						Duration: val.Duration,
					}
				}
			}
		}
	}
	return result
}

// NewProtoTestSmokeRequest builds the gRPC request type from the payload of
// the "test_smoke" endpoint of the "tester" service.
func NewProtoTestSmokeRequest() *testerpb.TestSmokeRequest {
	message := &testerpb.TestSmokeRequest{}
	return message
}

// NewTestSmokeResult builds the result type of the "test_smoke" endpoint of
// the "tester" service from the gRPC response type.
func NewTestSmokeResult(message *testerpb.TestSmokeResponse) *tester.TestResults {
	result := &tester.TestResults{
		Duration:  message.Duration,
		PassCount: int(message.PassCount),
		FailCount: int(message.FailCount),
	}
	if message.Collections != nil {
		result.Collections = make([]*tester.TestCollection, len(message.Collections))
		for i, val := range message.Collections {
			result.Collections[i] = &tester.TestCollection{
				Name:      val.Name,
				Duration:  val.Duration,
				PassCount: int(val.PassCount),
				FailCount: int(val.FailCount),
			}
			if val.Results != nil {
				result.Collections[i].Results = make([]*tester.TestResult, len(val.Results))
				for j, val := range val.Results {
					result.Collections[i].Results[j] = &tester.TestResult{
						Name:     val.Name,
						Passed:   val.Passed,
						Error:    val.Error,
						Duration: val.Duration,
					}
				}
			}
		}
	}
	return result
}

// NewProtoTestForecasterRequest builds the gRPC request type from the payload
// of the "test_forecaster" endpoint of the "tester" service.
func NewProtoTestForecasterRequest() *testerpb.TestForecasterRequest {
	message := &testerpb.TestForecasterRequest{}
	return message
}

// NewTestForecasterResult builds the result type of the "test_forecaster"
// endpoint of the "tester" service from the gRPC response type.
func NewTestForecasterResult(message *testerpb.TestForecasterResponse) *tester.TestResults {
	result := &tester.TestResults{
		Duration:  message.Duration,
		PassCount: int(message.PassCount),
		FailCount: int(message.FailCount),
	}
	if message.Collections != nil {
		result.Collections = make([]*tester.TestCollection, len(message.Collections))
		for i, val := range message.Collections {
			result.Collections[i] = &tester.TestCollection{
				Name:      val.Name,
				Duration:  val.Duration,
				PassCount: int(val.PassCount),
				FailCount: int(val.FailCount),
			}
			if val.Results != nil {
				result.Collections[i].Results = make([]*tester.TestResult, len(val.Results))
				for j, val := range val.Results {
					result.Collections[i].Results[j] = &tester.TestResult{
						Name:     val.Name,
						Passed:   val.Passed,
						Error:    val.Error,
						Duration: val.Duration,
					}
				}
			}
		}
	}
	return result
}

// NewProtoTestLocatorRequest builds the gRPC request type from the payload of
// the "test_locator" endpoint of the "tester" service.
func NewProtoTestLocatorRequest() *testerpb.TestLocatorRequest {
	message := &testerpb.TestLocatorRequest{}
	return message
}

// NewTestLocatorResult builds the result type of the "test_locator" endpoint
// of the "tester" service from the gRPC response type.
func NewTestLocatorResult(message *testerpb.TestLocatorResponse) *tester.TestResults {
	result := &tester.TestResults{
		Duration:  message.Duration,
		PassCount: int(message.PassCount),
		FailCount: int(message.FailCount),
	}
	if message.Collections != nil {
		result.Collections = make([]*tester.TestCollection, len(message.Collections))
		for i, val := range message.Collections {
			result.Collections[i] = &tester.TestCollection{
				Name:      val.Name,
				Duration:  val.Duration,
				PassCount: int(val.PassCount),
				FailCount: int(val.FailCount),
			}
			if val.Results != nil {
				result.Collections[i].Results = make([]*tester.TestResult, len(val.Results))
				for j, val := range val.Results {
					result.Collections[i].Results[j] = &tester.TestResult{
						Name:     val.Name,
						Passed:   val.Passed,
						Error:    val.Error,
						Duration: val.Duration,
					}
				}
			}
		}
	}
	return result
}

// ValidateTestAllResponse runs the validations defined on TestAllResponse.
func ValidateTestAllResponse(message *testerpb.TestAllResponse) (err error) {
	if message.Collections == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Collections", "message"))
	}
	return
}

// ValidateTestSmokeResponse runs the validations defined on TestSmokeResponse.
func ValidateTestSmokeResponse(message *testerpb.TestSmokeResponse) (err error) {
	if message.Collections == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Collections", "message"))
	}
	return
}

// ValidateTestForecasterResponse runs the validations defined on
// TestForecasterResponse.
func ValidateTestForecasterResponse(message *testerpb.TestForecasterResponse) (err error) {
	if message.Collections == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Collections", "message"))
	}
	return
}

// ValidateTestLocatorResponse runs the validations defined on
// TestLocatorResponse.
func ValidateTestLocatorResponse(message *testerpb.TestLocatorResponse) (err error) {
	if message.Collections == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Collections", "message"))
	}
	return
}
