// Code generated by goa v3.14.0, DO NOT EDIT.
//
// tester gRPC client CLI support package
//
// Command:
// $ goa gen goa.design/clue/example/weather/services/tester/design -o
// services/tester

package client

import (
	"encoding/json"
	"fmt"

	testerpb "goa.design/clue/example/weather/services/tester/gen/grpc/tester/pb"
	tester "goa.design/clue/example/weather/services/tester/gen/tester"
)

// BuildTestAllPayload builds the payload for the tester test_all endpoint from
// CLI flags.
func BuildTestAllPayload(testerTestAllMessage string) (*tester.TesterPayload, error) {
	var err error
	var message testerpb.TestAllRequest
	{
		if testerTestAllMessage != "" {
			err = json.Unmarshal([]byte(testerTestAllMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"Exclude\": [\n         \"TestNameToExclude\"\n      ],\n      \"Include\": [\n         \"TestNameToInclude\"\n      ]\n   }'")
			}
		}
	}
	v := &tester.TesterPayload{}
	if message.Include != nil {
		v.Include = make([]string, len(message.Include))
		for i, val := range message.Include {
			v.Include[i] = val
		}
	}
	if message.Exclude != nil {
		v.Exclude = make([]string, len(message.Exclude))
		for i, val := range message.Exclude {
			v.Exclude[i] = val
		}
	}

	return v, nil
}
