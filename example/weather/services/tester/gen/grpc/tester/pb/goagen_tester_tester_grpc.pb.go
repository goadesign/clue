// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: goagen_tester_tester.proto

package weather_testerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TesterClient is the client API for Tester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TesterClient interface {
	// Runs all tests in the iam system
	TestAll(ctx context.Context, in *TestAllRequest, opts ...grpc.CallOption) (*TestAllResponse, error)
	// Runs smoke tests in the iam system
	TestSmoke(ctx context.Context, in *TestSmokeRequest, opts ...grpc.CallOption) (*TestSmokeResponse, error)
	// Runs tests for the forecaster service
	TestForecaster(ctx context.Context, in *TestForecasterRequest, opts ...grpc.CallOption) (*TestForecasterResponse, error)
	// Runs tests for the locator service
	TestLocator(ctx context.Context, in *TestLocatorRequest, opts ...grpc.CallOption) (*TestLocatorResponse, error)
}

type testerClient struct {
	cc grpc.ClientConnInterface
}

func NewTesterClient(cc grpc.ClientConnInterface) TesterClient {
	return &testerClient{cc}
}

func (c *testerClient) TestAll(ctx context.Context, in *TestAllRequest, opts ...grpc.CallOption) (*TestAllResponse, error) {
	out := new(TestAllResponse)
	err := c.cc.Invoke(ctx, "/weather_tester.Tester/TestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testerClient) TestSmoke(ctx context.Context, in *TestSmokeRequest, opts ...grpc.CallOption) (*TestSmokeResponse, error) {
	out := new(TestSmokeResponse)
	err := c.cc.Invoke(ctx, "/weather_tester.Tester/TestSmoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testerClient) TestForecaster(ctx context.Context, in *TestForecasterRequest, opts ...grpc.CallOption) (*TestForecasterResponse, error) {
	out := new(TestForecasterResponse)
	err := c.cc.Invoke(ctx, "/weather_tester.Tester/TestForecaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testerClient) TestLocator(ctx context.Context, in *TestLocatorRequest, opts ...grpc.CallOption) (*TestLocatorResponse, error) {
	out := new(TestLocatorResponse)
	err := c.cc.Invoke(ctx, "/weather_tester.Tester/TestLocator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TesterServer is the server API for Tester service.
// All implementations must embed UnimplementedTesterServer
// for forward compatibility
type TesterServer interface {
	// Runs all tests in the iam system
	TestAll(context.Context, *TestAllRequest) (*TestAllResponse, error)
	// Runs smoke tests in the iam system
	TestSmoke(context.Context, *TestSmokeRequest) (*TestSmokeResponse, error)
	// Runs tests for the forecaster service
	TestForecaster(context.Context, *TestForecasterRequest) (*TestForecasterResponse, error)
	// Runs tests for the locator service
	TestLocator(context.Context, *TestLocatorRequest) (*TestLocatorResponse, error)
	mustEmbedUnimplementedTesterServer()
}

// UnimplementedTesterServer must be embedded to have forward compatible implementations.
type UnimplementedTesterServer struct {
}

func (UnimplementedTesterServer) TestAll(context.Context, *TestAllRequest) (*TestAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestAll not implemented")
}
func (UnimplementedTesterServer) TestSmoke(context.Context, *TestSmokeRequest) (*TestSmokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestSmoke not implemented")
}
func (UnimplementedTesterServer) TestForecaster(context.Context, *TestForecasterRequest) (*TestForecasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestForecaster not implemented")
}
func (UnimplementedTesterServer) TestLocator(context.Context, *TestLocatorRequest) (*TestLocatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestLocator not implemented")
}
func (UnimplementedTesterServer) mustEmbedUnimplementedTesterServer() {}

// UnsafeTesterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TesterServer will
// result in compilation errors.
type UnsafeTesterServer interface {
	mustEmbedUnimplementedTesterServer()
}

func RegisterTesterServer(s grpc.ServiceRegistrar, srv TesterServer) {
	s.RegisterService(&Tester_ServiceDesc, srv)
}

func _Tester_TestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).TestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weather_tester.Tester/TestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).TestAll(ctx, req.(*TestAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tester_TestSmoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSmokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).TestSmoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weather_tester.Tester/TestSmoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).TestSmoke(ctx, req.(*TestSmokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tester_TestForecaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestForecasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).TestForecaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weather_tester.Tester/TestForecaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).TestForecaster(ctx, req.(*TestForecasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tester_TestLocator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestLocatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).TestLocator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weather_tester.Tester/TestLocator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).TestLocator(ctx, req.(*TestLocatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tester_ServiceDesc is the grpc.ServiceDesc for Tester service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tester_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weather_tester.Tester",
	HandlerType: (*TesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestAll",
			Handler:    _Tester_TestAll_Handler,
		},
		{
			MethodName: "TestSmoke",
			Handler:    _Tester_TestSmoke_Handler,
		},
		{
			MethodName: "TestForecaster",
			Handler:    _Tester_TestForecaster_Handler,
		},
		{
			MethodName: "TestLocator",
			Handler:    _Tester_TestLocator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goagen_tester_tester.proto",
}
