// Code generated by goa v3.5.4, DO NOT EDIT.
//
// Forecast gRPC client
//
// Command:
// $ goa gen
// github.com/crossnokaye/micro/example/weather/services/forecast/design -o
// example/weather/services/forecast

package client

import (
	"context"

	forecastpb "github.com/crossnokaye/micro/example/weather/services/forecast/gen/grpc/forecast/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli forecastpb.ForecastClient
	opts    []grpc.CallOption
}

// NewClient instantiates gRPC client for all the Forecast service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: forecastpb.NewForecastClient(cc),
		opts:    opts,
	}
}

// Forecast calls the "Forecast" function in forecastpb.ForecastClient
// interface.
func (c *Client) Forecast() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildForecastFunc(c.grpccli, c.opts...),
			EncodeForecastRequest,
			DecodeForecastResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}
