// Code generated by goa v3.5.4, DO NOT EDIT.
//
// Forecast gRPC client CLI support package
//
// Command:
// $ goa gen
// github.com/crossnokaye/micro/example/weather/services/forecast/design -o
// services/forecast

package client

import (
	"encoding/json"
	"fmt"

	forecast "github.com/crossnokaye/micro/example/weather/services/forecast/gen/forecast"
	forecastpb "github.com/crossnokaye/micro/example/weather/services/forecast/gen/grpc/forecast/pb"
)

// BuildForecastPayload builds the payload for the Forecast forecast endpoint
// from CLI flags.
func BuildForecastPayload(forecastForecastMessage string) (*forecast.ForecastPayload, error) {
	var err error
	var message forecastpb.ForecastRequest
	{
		if forecastForecastMessage != "" {
			err = json.Unmarshal([]byte(forecastForecastMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"lat\": 37.8267,\n      \"long\": -122.4233\n   }'")
			}
		}
	}
	v := &forecast.ForecastPayload{
		Lat:  message.Lat,
		Long: message.Long,
	}

	return v, nil
}
