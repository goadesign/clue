// Code generated by goa v3.5.4, DO NOT EDIT.
//
// Forecast gRPC client encoders and decoders
//
// Command:
// $ goa gen
// github.com/crossnokaye/micro/example/weather/services/forecast/design -o
// example/weather/services/forecast

package client

import (
	"context"

	forecast "github.com/crossnokaye/micro/example/weather/services/forecast/gen/forecast"
	forecastpb "github.com/crossnokaye/micro/example/weather/services/forecast/gen/grpc/forecast/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildForecastFunc builds the remote method to invoke for "Forecast" service
// "forecast" endpoint.
func BuildForecastFunc(grpccli forecastpb.ForecastClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Forecast(ctx, reqpb.(*forecastpb.ForecastRequest), opts...)
		}
		return grpccli.Forecast(ctx, &forecastpb.ForecastRequest{}, opts...)
	}
}

// EncodeForecastRequest encodes requests sent to Forecast forecast endpoint.
func EncodeForecastRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*forecast.ForecastPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Forecast", "forecast", "*forecast.ForecastPayload", v)
	}
	return NewForecastRequest(payload), nil
}

// DecodeForecastResponse decodes responses from the Forecast forecast endpoint.
func DecodeForecastResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*forecastpb.ForecastResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Forecast", "forecast", "*forecastpb.ForecastResponse", v)
	}
	if err := ValidateForecastResponse(message); err != nil {
		return nil, err
	}
	res := NewForecastResult(message)
	return res, nil
}
