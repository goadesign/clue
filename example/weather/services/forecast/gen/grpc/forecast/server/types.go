// Code generated by goa v3.5.4, DO NOT EDIT.
//
// Forecast gRPC server types
//
// Command:
// $ goa gen
// github.com/crossnokaye/micro/example/weather/services/forecast/design -o
// services/forecast

package server

import (
	forecast "github.com/crossnokaye/micro/example/weather/services/forecast/gen/forecast"
	forecastpb "github.com/crossnokaye/micro/example/weather/services/forecast/gen/grpc/forecast/pb"
)

// NewForecastPayload builds the payload of the "forecast" endpoint of the
// "Forecast" service from the gRPC request type.
func NewForecastPayload(message *forecastpb.ForecastRequest) *forecast.ForecastPayload {
	v := &forecast.ForecastPayload{
		Lat:  message.Lat,
		Long: message.Long,
	}
	return v
}

// NewForecastResponse builds the gRPC response type from the result of the
// "forecast" endpoint of the "Forecast" service.
func NewForecastResponse(result *forecast.Forecast2) *forecastpb.ForecastResponse {
	message := &forecastpb.ForecastResponse{}
	if result.Location != nil {
		message.Location = svcForecastLocationToForecastpbLocation(result.Location)
	}
	if result.Periods != nil {
		message.Periods = make([]*forecastpb.Period, len(result.Periods))
		for i, val := range result.Periods {
			message.Periods[i] = &forecastpb.Period{
				Name:            val.Name,
				StartTime:       val.StartTime,
				EndTime:         val.EndTime,
				Temperature:     int32(val.Temperature),
				TemperatureUnit: val.TemperatureUnit,
				Summary:         val.Summary,
			}
		}
	}
	return message
}

// svcForecastLocationToForecastpbLocation builds a value of type
// *forecastpb.Location from a value of type *forecast.Location.
func svcForecastLocationToForecastpbLocation(v *forecast.Location) *forecastpb.Location {
	res := &forecastpb.Location{
		Lat:   v.Lat,
		Long:  v.Long,
		City:  v.City,
		State: v.State,
	}

	return res
}

// protobufForecastpbLocationToForecastLocation builds a value of type
// *forecast.Location from a value of type *forecastpb.Location.
func protobufForecastpbLocationToForecastLocation(v *forecastpb.Location) *forecast.Location {
	res := &forecast.Location{
		Lat:   v.Lat,
		Long:  v.Long,
		City:  v.City,
		State: v.State,
	}

	return res
}
